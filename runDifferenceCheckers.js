import { readdirSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';
import { spawn } from 'child_process';
import chalk from 'chalk';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const differenceFolderPath = join(__dirname, 'differenceBetweenOffers');
const INTERVAL = 30; // —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏

async function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

function getTimestamp() {
    const now = new Date();
    const date = now.toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric'
    });
    const time = now.toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
    });
    return chalk.hex('#6CB6FF')(`[${date} ${time}]`);
}

function log(message, newLine = false) {
    console.log(`${getTimestamp()} ${message}${newLine ? '\n' : ''}`);
}

async function runDifferenceCheckers() {
    try {
        const scriptsToRun = [
            { name: '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö FunPay', file: join(differenceFolderPath, 'get2PageOffers.js') },
            { name: '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–æ–≤', file: join(differenceFolderPath, 'compareOffers.js') },
            { name: '–ó–∞–ø–∏—Å—å –≤ Google Sheets', file: join(differenceFolderPath, 'writeToGoogleSheets.js') }
        ];

        log('üîÑ ' + chalk.cyan.bold('–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–ª–∏—á–∏–π...'));
        
        let offersCount = 0;

        for (let i = 0; i < scriptsToRun.length; i++) {
            const { name, file } = scriptsToRun[i];
            const step = i + 1;
            
            let scriptOutput = '';
            log(chalk.yellow(`[${step}/${scriptsToRun.length}] `) + chalk.white(name));
            process.stdout.write(`${getTimestamp()} ` + chalk.gray('‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ...'));

            const childProcess = spawn('node', [file], { 
                stdio: ['inherit', 'pipe', 'pipe'],
                shell: true,
                maxBuffer: 1024 * 1024 * 10
            });

            childProcess.stdout.on('data', (data) => {
                scriptOutput += data.toString();
            });

            await new Promise((resolve, reject) => {
                const timeout = setTimeout(() => {
                    childProcess.kill();
                    reject(new Error(`–¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏: ${name}`));
                }, 300000);

                childProcess.on('close', (code) => {
                    clearTimeout(timeout);
                    process.stdout.clearLine(0);
                    process.stdout.cursorTo(0);
                    
                    if (code === 0) {
                        if (name === '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–æ–≤') {
                            const match = scriptOutput.match(/OFFERS_TO_ADD:(\d+)/);
                            if (match) {
                                offersCount = parseInt(match[1]);
                                log(chalk.green('‚úì –ó–∞–≤–µ—Ä—à–µ–Ω–æ') + chalk.white(' ‚Üí ') + 
                                    chalk.yellow(`–ù–∞–π–¥–µ–Ω–æ –æ—Ñ—Ñ–µ—Ä–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: ${offersCount}`));
                            } else {
                                log(chalk.green('‚úì –ó–∞–≤–µ—Ä—à–µ–Ω–æ'));
                            }
                        } else {
                            log(chalk.green('‚úì –ó–∞–≤–µ—Ä—à–µ–Ω–æ'));
                        }
                        resolve();
                    } else {
                        reject(new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: ${name}`));
                    }
                });

                childProcess.on('error', (err) => {
                    clearTimeout(timeout);
                    reject(err);
                });
            });

            await new Promise(resolve => setTimeout(resolve, 500));
        }

        log('‚ú® ' + chalk.green.bold('–í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!'), true);

    } catch (error) {
        log(chalk.red.bold('‚ö†Ô∏è –û—à–∏–±–∫–∞') + chalk.white(' ‚Üí ') + chalk.red(error.message));
        throw error;
    }
}

async function startMonitoring() {
    log('üöÄ ' + chalk.cyan.bold('–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ FunPay'));
    log(chalk.gray(`–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: ${INTERVAL} —Å–µ–∫—É–Ω–¥`), true);

    while (true) {
        try {
            await runDifferenceCheckers();
            
            for (let i = INTERVAL; i > 0; i--) {
                process.stdout.clearLine(0);
                process.stdout.cursorTo(0);
                process.stdout.write(
                    `${getTimestamp()} ` +
                    chalk.yellow('‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑: ') + 
                    chalk.white(`${i} —Å–µ–∫`)
                );
                await sleep(1000);
            }
            process.stdout.clearLine(0);
            process.stdout.cursorTo(0);
            
        } catch (error) {
            await sleep(5000);
        }
    }
}

startMonitoring();
