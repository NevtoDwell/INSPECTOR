import { google } from 'googleapis';
import fs from 'fs';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import chalk from 'chalk';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const FORMAT_CONFIGS = {
  HEADER: {
    backgroundColor: { red: 0.2, green: 0.2, blue: 0.2 },
    textFormat: {
      bold: true,
      foregroundColor: { red: 1, green: 1, blue: 1 },
      fontSize: 11,
    },
    horizontalAlignment: 'CENTER',
    verticalAlignment: 'MIDDLE',
  },
  ROW_TYPES: {
    '‚úÖ‚úÖ‚úÖ SAME': { red: 0.565, green: 0.933, blue: 0.565 },
    '‚ùå‚ùå‚ùå ADD ME': { red: 1, green: 0.8, blue: 0.8 },
    '‚ûï‚ûï‚ûï ADDITIONAL LOT': { red: 0.8, green: 0.6, blue: 1 },
  },
};

const SPREADSHEET_ID = '1vMm_FHnUp1xH-07OoOr2BQIRKkOoVG0r1yKff82xVUw';

async function initializeGoogleSheets() {
  const auth = new google.auth.GoogleAuth({
    keyFile: join(__dirname, '..', '..', 'api keys', 'credentials.json'),
    scopes: ['https://www.googleapis.com/auth/spreadsheets'],
  });
  return google.sheets({ version: 'v4', auth: await auth.getClient() });
}

async function clearSheet(sheets, sheetId) {
  const requests = [
    {
      updateCells: {
        range: {
          sheetId: sheetId,
          startRowIndex: 0,
          startColumnIndex: 0,
        },
        fields: 'userEnteredFormat',
      },
    },
  ];

  await sheets.spreadsheets.batchUpdate({
    spreadsheetId: SPREADSHEET_ID,
    resource: { requests },
  });
}

async function formatHeaders(sheets, sheetId, endColumnIndex) {
  const requests = [
    {
      repeatCell: {
        range: {
          sheetId: sheetId,
          startRowIndex: 0,
          endRowIndex: 1,
        },
        cell: {
          userEnteredFormat: FORMAT_CONFIGS.HEADER,
        },
        fields: 'userEnteredFormat(backgroundColor,textFormat,horizontalAlignment,verticalAlignment)',
      },
    },
    {
      autoResizeDimensions: {
        dimensions: {
          sheetId: sheetId,
          dimension: 'COLUMNS',
          startIndex: 0,
          endIndex: endColumnIndex,
        },
      },
    },
    {
      updateSheetProperties: {
        properties: {
          sheetId: sheetId,
          gridProperties: {
            frozenRowCount: 1,
          },
        },
        fields: 'gridProperties.frozenRowCount',
      },
    },
  ];

  await sheets.spreadsheets.batchUpdate({
    spreadsheetId: SPREADSHEET_ID,
    resource: { requests },
  });
}

async function writeToGoogleSheets() {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets API
    const sheets = await initializeGoogleSheets();

    // –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const [differences, profileNames, offersToAdd] = await Promise.all([
      JSON.parse(fs.readFileSync(join(__dirname, 'differences.json'), 'utf-8')),
      JSON.parse(fs.readFileSync(join(__dirname, 'profile_names.json'), 'utf-8')),
      JSON.parse(fs.readFileSync(join(__dirname, 'offers_to_add.json'), 'utf-8')),
    ]);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—Å—Ç–∞—Ö
    const { data: { sheets: sheetsList } } = await sheets.spreadsheets.get({ spreadsheetId: SPREADSHEET_ID });
    const differenceSheet = sheetsList.find(sheet => sheet.properties.title === 'DIFFERENCE');
    const needAddSheet = sheetsList.find(sheet => sheet.properties.title === 'NEED ADD');

    if (!differenceSheet || !needAddSheet) {
      throw new Error('Required sheets not found');
    }

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è DIFFERENCE
    const headers = [
      'Difference Type', 
      'Title', 
      `Description (${profileNames.user_1})`, 
      `Description (${profileNames.user_2})`, 
      `Price (${profileNames.user_1})`, 
      `Price (${profileNames.user_2})`, 
      'Difference',
      'FunPay Category ID',
    ];

    const rows = differences.map(item => {
      if (item.differenceType === '‚úÖ‚úÖ‚úÖ SAME') {
        return [
          item.differenceType,
          item.title,
          item.descText1.split(',')[0],
          item.descText2.split(',')[0],
          item.price1Rusya,
          item.price2BestRmt,
          item.priceDifference,
          item.node_id || '',
        ];
      }
      return [
        item.differenceType,
        item.title,
        item.descText.split(',')[0],
        '',
        item.price,
        '',
        '',
        item.node_id || '',
      ];
    });

    // –û—á–∏—Å—Ç–∫–∞ –∏ –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö DIFFERENCE
    await Promise.all([
      clearSheet(sheets, differenceSheet.properties.sheetId),
      sheets.spreadsheets.values.clear({
        spreadsheetId: SPREADSHEET_ID,
        range: 'DIFFERENCE!A:H',
      }),
    ]);

    await sheets.spreadsheets.values.update({
      spreadsheetId: SPREADSHEET_ID,
      range: 'DIFFERENCE!A1',
      valueInputOption: 'RAW',
      resource: { values: [headers, ...rows] },
    });

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è NEED ADD
    const needAddHeaders = ['Title', 'Description', 'Price', 'FunPay Category ID'];
    const needAddRows = offersToAdd.map(item => [
      item.title,
      item.descText.split(',')[0],
      item.price,
      item.node_id || '',
    ]);

    // –û—á–∏—Å—Ç–∫–∞ –∏ –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö NEED ADD
    await Promise.all([
      clearSheet(sheets, needAddSheet.properties.sheetId),
      sheets.spreadsheets.values.clear({
        spreadsheetId: SPREADSHEET_ID,
        range: 'NEED ADD',
      }),
    ]);

    await sheets.spreadsheets.values.update({
      spreadsheetId: SPREADSHEET_ID,
      range: 'NEED ADD!A1:D',
      valueInputOption: 'RAW',
      resource: { values: [needAddHeaders, ...needAddRows] },
    });

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–æ–∏—Ö –ª–∏—Å—Ç–æ–≤
    await Promise.all([
      formatHeaders(sheets, differenceSheet.properties.sheetId, 8),
      formatHeaders(sheets, needAddSheet.properties.sheetId, 4),
    ]);

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –¥–∞–Ω–Ω—ã–º
    const formatRequests = [];
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö
    rows.forEach((row, index) => {
      const rowIndex = index + 1;
      const backgroundColor = FORMAT_CONFIGS.ROW_TYPES[row[0]];

      if (backgroundColor) {
        formatRequests.push({
          repeatCell: {
            range: {
              sheetId: differenceSheet.properties.sheetId,
              startRowIndex: rowIndex,
              endRowIndex: rowIndex + 1,
              startColumnIndex: 0,
              endColumnIndex: 8,
            },
            cell: {
              userEnteredFormat: {
                backgroundColor,
                verticalAlignment: 'MIDDLE',
                textFormat: { fontSize: 10 },
                wrapStrategy: 'WRAP',
              },
            },
            fields: 'userEnteredFormat(backgroundColor,verticalAlignment,textFormat,wrapStrategy)',
          },
        });
      }

      // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ "–ø–æ–¥ –∑–∞–∫–∞–∑"
      const description = row[2] || '';
      if (description.toLowerCase().includes('–ø–æ–¥ –∑–∞–∫–∞–∑') || description === '1') {
        formatRequests.push({
          repeatCell: {
            range: {
              sheetId: differenceSheet.properties.sheetId,
              startRowIndex: rowIndex,
              endRowIndex: rowIndex + 1,
              startColumnIndex: 2,
              endColumnIndex: 3,
            },
            cell: {
              userEnteredFormat: {
                backgroundColor: { red: 1, green: 0.95, blue: 0.6 },
                textFormat: { bold: true },
              },
            },
            fields: 'userEnteredFormat(backgroundColor,textFormat)',
          },
        });
      }

      // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –±–æ–ª—å—à–æ–π —Ä–∞–∑–Ω–∏—Ü—ã –≤ —Ü–µ–Ω–µ
      if (row[6] && parseFloat(row[6]) > 100) {
        formatRequests.push({
          repeatCell: {
            range: {
              sheetId: differenceSheet.properties.sheetId,
              startRowIndex: rowIndex,
              endRowIndex: rowIndex + 1,
              startColumnIndex: 6,
              endColumnIndex: 7,
            },
            cell: {
              userEnteredFormat: {
                backgroundColor: { red: 1, green: 0, blue: 0 },
                textFormat: {
                  bold: true,
                  foregroundColor: { red: 1, green: 1, blue: 1 },
                },
              },
            },
            fields: 'userEnteredFormat(backgroundColor,textFormat)',
          },
        });
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —è—á–µ–µ–∫ –≤ NEED ADD
    if (needAddRows.length > 0) {
      formatRequests.push({
        repeatCell: {
          range: {
            sheetId: needAddSheet.properties.sheetId,
            startRowIndex: 1, // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            endRowIndex: needAddRows.length + 1,
            startColumnIndex: 0,
            endColumnIndex: 4,
          },
          cell: {
            userEnteredFormat: {
              backgroundColor: { red: 1, green: 0.8, blue: 0.8 }, // –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç
              verticalAlignment: 'MIDDLE',
              textFormat: { 
                fontSize: 10,
              },
              wrapStrategy: 'WRAP',
            },
          },
          fields: 'userEnteredFormat(backgroundColor,verticalAlignment,textFormat,wrapStrategy)',
        },
      });
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
    if (formatRequests.length > 0) {
      await sheets.spreadsheets.batchUpdate({
        spreadsheetId: SPREADSHEET_ID,
        resource: { requests: formatRequests },
      });
    }

    console.log(chalk.green.bold('üìä Google Sheets') + chalk.white(' ‚Üí ') + chalk.green('‚úì –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã'));

  } catch (error) {
    console.log(chalk.red.bold('üìä Google Sheets') + chalk.white(' ‚Üí ') + chalk.red('‚úó –û—à–∏–±–∫–∞: ') + error.message);
    process.exit(1);
  }
}

writeToGoogleSheets();