const fs = require('fs');
const path = require('path');
const axios = require('axios');
const FormData = require('form-data');
const { join } = require('path');

class FunPayFormProcessor {
    constructor(offersPath, configPath) {
        this.offersPath = offersPath;
        this.configPath = configPath;
        this.config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
        
        // –ß—Ç–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        this.descRu = fs.readFileSync(join(__dirname, 'desc_ru.txt'), 'utf-8').trim();
        this.descEn = fs.readFileSync(join(__dirname, 'desc_en.txt'), 'utf-8').trim();
    }

    formatDescription(text) {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        text = text.replace(/^[^\w\s]+|[^\w\s]+$/g, '');
        
        // –î–æ–±–∞–≤–ª—è–µ–º ‚úÖ –∏ ‚ö° –≤ –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü
        text = `‚úÖ ‚ö° ${text.trim()} ‚ö°`;
        
        return text;
    }

    async removeProcessedOffer(offer) {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            const offersPath = path.resolve(__dirname, '../differenceBetweenOffers/offers_to_add.json');
            console.log(' üìÅ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É offers_to_add.json:', offersPath);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if (!fs.existsSync(offersPath)) {
                throw new Error(`–§–∞–π–ª ${offersPath} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }

            // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤
            const offers = JSON.parse(fs.readFileSync(offersPath, 'utf8'));
            console.log(' üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ñ—Ñ–µ—Ä–æ–≤ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è:', offers.length);
            
            // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –æ—Ñ—Ñ–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            const offerIndex = offers.findIndex(o => 
                o.node_id === offer.node_id && 
                o.descText === offer.descText && 
                o.price === offer.price
            );

            if (offerIndex !== -1) {
                // –£–¥–∞–ª—è–µ–º –æ—Ñ—Ñ–µ—Ä
                offers.splice(offerIndex, 1);
                console.log(' üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ñ—Ñ–µ—Ä–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:', offers.length);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
                await fs.promises.writeFile(
                    offersPath, 
                    JSON.stringify(offers, null, 2), 
                    'utf-8'
                );
                
                console.log(' ‚ú® –û—Ñ—Ñ–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ offers_to_add.json');
                return true;
            } else {
                console.warn(' ‚ö†Ô∏è –û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
                return false;
            }
        } catch (error) {
            console.error(' ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ñ—Ñ–µ—Ä–∞:', error);
            throw error;
        }
    }

    async submitForm(offerData) {
        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –∫—É–∫–∏
            if (!offerData.cookies.includes('PHPSESSID') || !offerData.cookies.includes('golden_key')) {
                console.error(' –û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–∞–∂–Ω—ã–µ –∫—É–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (PHPSESSID –∏–ª–∏ golden_key)');
                return false;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π GET –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            const formPageResponse = await axios.get(offerData.url, {
                headers: {
                    'Cookie': offerData.cookies,
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
                }
            });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –æ—Ç–≤–µ—Ç–µ
            if (formPageResponse.data.includes('login') || 
                formPageResponse.data.includes('auth') || 
                formPageResponse.data.includes('–≤–æ–π—Ç–∏') ||
                formPageResponse.data.includes('–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü')) {
                console.error(' –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
                console.error(' –í–æ–∑–º–æ–∂–Ω–æ, –∫—É–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∏ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã');
                return false;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ñ–æ—Ä–º–µ
            if (!formPageResponse.data.includes('offerSave')) {
                console.error(' –û—à–∏–±–∫–∞: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–æ—Ä–º–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞');
                console.error(' –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é');
                return false;
            }

            console.log(' –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');

            // –ò–∑–≤–ª–µ–∫–∞–µ–º CSRF —Ç–æ–∫–µ–Ω –∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            const csrfToken = extractCsrfToken(formPageResponse.data);
            console.log(' –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π CSRF —Ç–æ–∫–µ–Ω:', csrfToken);

            const form = new FormData();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º CSRF —Ç–æ–∫–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
            offerData.formData.csrf_token = csrfToken;

            // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–æ–ª—è –≤ —Ñ–æ—Ä–º—É
            for (const [key, value] of Object.entries(offerData.formData)) {
                form.append(key, value);
            }

            const formCreatedAt = extractFormCreatedAt(formPageResponse.data);
            offerData.formData.form_created_at = formCreatedAt;
            console.log(' –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π form_created_at:', formCreatedAt);

            const response = await axios.post(offerData.submitUrl, form, {
                headers: {
                    ...form.getHeaders(),
                    'Cookie': offerData.cookies,
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
                    'Referer': offerData.url,
                    'Origin': 'https://funpay.com',
                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
                    'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
                    'X-Requested-With': 'XMLHttpRequest',
                    'Connection': 'keep-alive',
                    'Sec-Fetch-Dest': 'document',
                    'Sec-Fetch-Mode': 'navigate',
                    'Sec-Fetch-Site': 'same-origin',
                    'Sec-Fetch-User': '?1',
                    'Upgrade-Insecure-Requests': '1'
                },
                maxRedirects: 0,
                validateStatus: function (status) {
                    return true;
                }
            });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ —É–¥–∞–ª—è–µ–º –æ—Ñ—Ñ–µ—Ä —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å
            if (response.status === 302 || response.status === 200) {
                console.log(' ‚úÖ –§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
                try {
                    // –£–¥–∞–ª—è–µ–º –æ—Ñ—Ñ–µ—Ä —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                    await this.removeProcessedOffer(offerData.offer);
                    console.log(' üóëÔ∏è –û—Ñ—Ñ–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞');
                } catch (deleteError) {
                    console.error(' ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ñ—Ñ–µ—Ä–∞:', deleteError);
                }
                return true;
            }

            console.error(' ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã. –°—Ç–∞—Ç—É—Å:', response.status);
            console.error(' ‚ùå –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.data);
            return false;
        } catch (error) {
            console.error(' ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã:', error.message);
            return false;
        }
    }

    async readOffersToAdd() {
        try {
            const offers = JSON.parse(fs.readFileSync(this.offersPath, 'utf8'));
            
            console.log(' –í—Å–µ–≥–æ –æ—Ñ—Ñ–µ—Ä–æ–≤:', offers.length);

            // –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ñ—Ñ–µ—Ä—ã —Ç–æ–ª—å–∫–æ —Å node_id "1142" –∏ "1560"
            const filteredOffers = offers.filter(o => 
                (o.node_id === "1142" || o.node_id === "1560") && 
                o.descText && 
                o.price
            );

            if (filteredOffers.length === 0) {
                console.error(' –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
                console.error('–ü—Ä–∏—á–∏–Ω—ã:');
                console.error('- –ù–µ—Ç –æ—Ñ—Ñ–µ—Ä–æ–≤ —Å node_id "1142" –∏–ª–∏ "1560"');
                console.error('- –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ descText');
                console.error('- –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ price');
                return [];
            }

            // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞
            const reversedOffers = filteredOffers.reverse();

            console.log(' –í—ã–±—Ä–∞–Ω—ã –æ—Ñ—Ñ–µ—Ä—ã —Å node_id "1142" –∏ "1560":', reversedOffers.length);
            console.log(' –ü–µ—Ä–≤—ã–π –æ—Ñ—Ñ–µ—Ä (—Å –∫–æ–Ω—Ü–∞):', JSON.stringify(reversedOffers[0], null, 2));

            return reversedOffers;
        } catch (error) {
            console.error(' –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –æ—Ñ—Ñ–µ—Ä–æ–≤:', error);
            return [];
        }
    }

    async processAllOffers() {
        try {
            const offers = await this.readOffersToAdd();
            
            if (offers.length === 0) {
                console.log('‚ùå –ù–µ—Ç –æ—Ñ—Ñ–µ—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
                return false;
            }

            console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É ${offers.length} –æ—Ñ—Ñ–µ—Ä–æ–≤`);

            for (const [index, offer] of offers.entries()) {
                console.log(`\nüì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ñ—Ñ–µ—Ä–∞ ${index + 1}/${offers.length}`);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ñ—Ñ–µ—Ä–µ
                console.log('\x1b[36müéÆ –î–µ—Ç–∞–ª–∏ –æ—Ñ—Ñ–µ—Ä–∞:\x1b[0m');
                console.log(`\x1b[32m–ù–∞–∑–≤–∞–Ω–∏–µ: ${offer.title}\x1b[0m`);
                console.log(`\x1b[32mNode ID: ${offer.node_id}\x1b[0m`);
                console.log(`\x1b[32m–¶–µ–Ω–∞: ${offer.price}\x1b[0m`);
                console.log(`\x1b[32m–û–ø–∏—Å–∞–Ω–∏–µ (RU): ${offer.descText}\x1b[0m`);
                console.log(`\x1b[32m–û–ø–∏—Å–∞–Ω–∏–µ (EN): ${offer.descTextEn}\x1b[0m`);
                console.log(`\x1b[32m–°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ñ—Ñ–µ—Ä: ${offer.offerLink}\x1b[0m`);

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç node_id
                let formData;
                
                if (offer.node_id === "1142") { //Arknights
                    formData = {
                        csrf_token: this.config.csrf_token,
                        offer_id: '',
                        node_id: offer.node_id,
                        location: '',
                        deleted: '',
                        'fields[type]': '–ü–∞–∫–∏',
                        'fields[summary][ru]': this.formatDescription(offer.descText),
                        'fields[summary][en]': this.formatDescription(offer.descTextEn),
                        'fields[desc][ru]': this.descRu,
                        'fields[desc][en]': this.descEn,
                        'fields[payment_msg][ru]': ' ',
                        'fields[payment_msg][en]': ' ',
                        price: offer.price, 
                        amount: '999',
                        active: 'on'
                    };
                } else if (offer.node_id === "1560") { //Asphalt
                    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ü–µ–Ω—É –Ω–∞ 10%
                    const originalPrice = parseFloat(offer.price.replace(/[^\d.]/g, '')); // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ —Ç–æ—á–∫–∏
                    const increasedPrice = Math.round(originalPrice / 1.10);
                    
                    console.log(' üí∞ –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Ü–µ–Ω—ã:', offer.price);
                    console.log(' üí∞ –û—á–∏—â–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞:', originalPrice);
                    console.log(' üí∞ –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞:', increasedPrice);

                    formData = {
                        csrf_token: this.config.csrf_token,
                        offer_id: '',
                        node_id: offer.node_id,
                        location: '',
                        deleted: '',
                        server_id: '9074',
                        'fields[method]': '–° –∑–∞—Ö–æ–¥–æ–º –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç',
                        'fields[summary][ru]': this.formatDescription(offer.descText),
                        'fields[summary][en]': '',
                        'fields[desc][ru]': this.descRu,
                        'fields[desc][en]': '',
                        'fields[payment_msg][ru]': ' ',
                        'fields[payment_msg][en]': ' ',
                        'fields[images]': '',
                        price: increasedPrice,
                        deactivate_after_sale: '',
                        active: 'on'
                    };

                    // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
                    console.log(' üìù –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', JSON.stringify(formData, null, 2));
                }

                if (!formData) {
                    console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –æ—Ñ—Ñ–µ—Ä–∞: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π node_id ${offer.node_id}`);
                    continue;
                }

                try {
                    const result = await this.submitForm({
                        formData,
                        offer,
                        cookies: this.config.cookies,
                        url: `https://funpay.com/lots/offerEdit?node=${offer.node_id}`,
                        submitUrl: 'https://funpay.com/lots/offerSave'
                    });

                    if (!result) {
                        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ñ—Ñ–µ—Ä–∞ ${index + 1}`);
                    }

                    console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 2 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ—Ñ—Ñ–µ—Ä–æ–º...`);
                    await new Promise(resolve => setTimeout(resolve, 2000));

                } catch (submitError) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ñ—Ñ–µ—Ä–∞ ${index + 1}:`, submitError);
                    continue;
                }
            }

            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ñ—Ñ–µ—Ä–æ–≤:', error);
            return false;
        }
    }

    async main() {
        try {
            const processor = new FunPayFormProcessor(
                path.join(__dirname, 'offers_to_add.json'),
                path.join(__dirname, 'config.json')
            );

            await processor.processAllOffers();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ main:', error);
        }
    }
}

function extractCsrfToken(html) {
    // –ò—â–µ–º –º–µ—Ç–∞ —Ç–µ–≥ —Å csrf —Ç–æ–∫–µ–Ω–æ–º
    const csrfMatch = html.match(/<meta name="csrf-token" content="([^"]+)"/);
    if (csrfMatch && csrfMatch[1]) {
        return csrfMatch[1];
    }
    
    // –ò–ª–∏ –∏—â–µ–º –≤ —Ñ–æ—Ä–º–µ
    const formTokenMatch = html.match(/name="csrf_token" value="([^"]+)"/);
    if (formTokenMatch && formTokenMatch[1]) {
        return formTokenMatch[1];
    }
    
    throw new Error('CSRF token not found');
}

function extractFormCreatedAt(html) {
    const match = html.match(/name="form_created_at"\s+value="(\d+)"/);
    return match ? match[1] : Math.floor(Date.now() / 1000);
}

// –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Ñ—É–Ω–∫—Ü–∏—é main() –Ω–∞:
async function main() {
    const processor = new FunPayFormProcessor(
        path.join(__dirname, '../differenceBetweenOffers/offers_to_add.json'),
        path.join(__dirname, 'config.json')
    );

    // –í–º–µ—Å—Ç–æ processNextOffer() –∏—Å–ø–æ–ª—å–∑—É–µ–º processAllOffers()
    await processor.processAllOffers();
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main().catch(console.error);

module.exports = FunPayFormProcessor;
